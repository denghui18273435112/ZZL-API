{
  "uid" : "9ffd0282bc2a6beb",
  "name" : "Info_2获取个人信息正确",
  "fullName" : "testcase.test_excel_case.TestExcel#test_run",
  "historyId" : "82997c90e812bc3b4427310b48c280c0",
  "time" : {
    "start" : 1598250337952,
    "stop" : 1598250338821,
    "duration" : 869
  },
  "description" : "<font color='red'>当前执行时间: </font> 2020-08-24 14:25:38<Br/><font color='red'>请求URL: </font> http://211.103.136.242:8064/user/<Br/><font color='red'>请求类型: </font>get<Br/><font color='red'>期望状态码: </font>200.0<Br/><font color='red'>实际状态码: </font>200<Br/><font color='red'>期望结果: </font>{'email': '952673638@qq.com',\n 'id': 1,\n 'mobile': '17701397029',\n 'username': 'python'}<Br/><font color='red'>实际结果: </font>{'email': '952673638@qq.com',\n 'email_active': True,\n 'id': 1,\n 'mobile': '17701397029',\n 'username': 'python'}",
  "descriptionHtml" : "<p><font color='red'>当前执行时间: </font> 2020-08-24 14:25:38<Br/><font color='red'>请求URL: </font> http://211.103.136.242:8064/user/<Br/><font color='red'>请求类型: </font>get<Br/><font color='red'>期望状态码: </font>200.0<Br/><font color='red'>实际状态码: </font>200<Br/><font color='red'>期望结果: </font>{'email': '952673638@qq.com',\n'id': 1,\n'mobile': '17701397029',\n'username': 'python'}<Br/><font color='red'>实际结果: </font>{'email': '952673638@qq.com',\n'email_active': True,\n'id': 1,\n'mobile': '17701397029',\n'username': 'python'}</p>\n",
  "status" : "broken",
  "statusMessage" : "AttributeError: 'str' object has no attribute 'keys'",
  "statusTrace" : "self = <testcase.test_excel_case.TestExcel object at 0x04203530>\ncase = {'cookies': '', 'headers': '{\"Authorization\": \"JWT ${token}$\"}', 'status_code': 200.0, '前置条件': 'login_4', ...}\n\n    @pytest.mark.parametrize(\"case\",run_list)\n    # 2、修改方法参数\n    def test_run(self,case):\n    \n    \n    \n        # 3、重构函数内容\n        #data_key = ExcelConfig.DataConfig\n        # run_list第1个用例，用例，key获取values\n        #获取表格上字段的信息\n        url = ConfigYaml().get_conf_url()+case[data_key.url]\n        case_id = case[data_key.case_id]\n        case_model = case[data_key.case_model]\n        case_name = case[data_key.case_name]\n        pre_exec = case[data_key.pre_exec]\n        method = case[data_key.method]\n        params_type = case[data_key.params_type]\n        params = case[data_key.params]\n        expect_result = case[data_key.expect_result]\n        headers = case[data_key.headers]\n        cookies =case[data_key.cookies]\n        code = case[data_key.code]\n        db_verify = case[data_key.db_verify]\n    \n    \n    \n        # 1、验证前置条件\n        if pre_exec:\n            pass\n        # 2、找到执行用例\n            # 前置测试用例\n            pre_case = data_init.get_case_pre(pre_exec)\n            print(\"前置条件信息为：%s\"%pre_case)\n            pre_res = self.run_pre(pre_case)\n            headers,cookies = self.get_correlation(headers,cookies,pre_res)\n    \n        header = Base.json_parse(headers)\n        cookie = Base.json_parse(cookies)\n        res = self.run_api(url, method, params, header,cookie)\n        print(\"测试用例执行：%s\" % res)\n    \n        #allure\n        #sheet名称  feature 一级标签\n        allure.dynamic.feature(sheet_name)\n        #模块   story 二级标签\n        allure.dynamic.story(case_model)\n        #用例ID+接口名称  title\n        allure.dynamic.title(case_id+case_name)\n        #请求URL  请求类型 期望结果 实际结果描述\n        desc = \"<font color='red'>当前执行时间: </font> {}<Br/>\" \\\n                \"<font color='red'>请求URL: </font> {}<Br/>\" \\\n               \"<font color='red'>请求类型: </font>{}<Br/>\" \\\n                \"<font color='red'>期望状态码: </font>{}<Br/>\" \\\n                \"<font color='red'>实际状态码: </font>{}<Br/>\" \\\n               \"<font color='red'>期望结果: </font>{}<Br/>\" \\\n               \"<font color='red'>实际结果: </font>{}\".format(str(datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")),\n                                                          url,method,code,pprint.pformat(res[\"code\"]),\n                                                          pprint.pformat(eval(expect_result)),\n                                                          pprint.pformat(res[\"body\"]))\n        allure.dynamic.description(desc)\n    \n    \n        #断言验证\n        #状态码，返回结果内容，数据库相关的结果的验证\n        #状态码\n        #assert_util = AssertUitl()\n        AssertUitl().assert_code(int(res[\"code\"]),int(code))\n    \n        #返回结果内容\n>       AssertUitl().assert_int_body_dict(expect_result,res[\"body\"])\n\ntestcase\\test_excel_case.py:163: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.AssertUitl.AssertUitl object at 0x042038B0>\nexpected_body = \"{'id': 1, 'username': 'python', 'mobile': '17701397029', 'email': '952673638@qq.com'}\"\nbody = {'email': '952673638@qq.com', 'email_active': True, 'id': 1, 'mobile': '17701397029', ...}\n\n    def assert_int_body_dict(self,expected_body,body):\n        \"\"\"\n        #只接收字典类型数据\n        # 验证返回结果 body是否包含expected_body\n        # :param body:            接口请求所返回的body\n        # :param expected_body:  表格取的需要对比的body\n        # :return:\n        \"\"\"\n        try:\n            count=0\n            for body_key in body.keys():\n>               for expected_body_key in expected_body.keys():\nE               AttributeError: 'str' object has no attribute 'keys'\n\nutils\\AssertUitl.py:66: AttributeError",
  "flaky" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "<font color='red'>当前执行时间: </font> 2020-08-24 14:25:38<Br/><font color='red'>请求URL: </font> http://211.103.136.242:8064/user/<Br/><font color='red'>请求类型: </font>get<Br/><font color='red'>期望状态码: </font>200.0<Br/><font color='red'>实际状态码: </font>200<Br/><font color='red'>期望结果: </font>{'email': '952673638@qq.com',\n 'id': 1,\n 'mobile': '17701397029',\n 'username': 'python'}<Br/><font color='red'>实际结果: </font>{'email': '952673638@qq.com',\n 'email_active': True,\n 'id': 1,\n 'mobile': '17701397029',\n 'username': 'python'}",
    "status" : "broken",
    "statusMessage" : "AttributeError: 'str' object has no attribute 'keys'",
    "statusTrace" : "self = <testcase.test_excel_case.TestExcel object at 0x04203530>\ncase = {'cookies': '', 'headers': '{\"Authorization\": \"JWT ${token}$\"}', 'status_code': 200.0, '前置条件': 'login_4', ...}\n\n    @pytest.mark.parametrize(\"case\",run_list)\n    # 2、修改方法参数\n    def test_run(self,case):\n    \n    \n    \n        # 3、重构函数内容\n        #data_key = ExcelConfig.DataConfig\n        # run_list第1个用例，用例，key获取values\n        #获取表格上字段的信息\n        url = ConfigYaml().get_conf_url()+case[data_key.url]\n        case_id = case[data_key.case_id]\n        case_model = case[data_key.case_model]\n        case_name = case[data_key.case_name]\n        pre_exec = case[data_key.pre_exec]\n        method = case[data_key.method]\n        params_type = case[data_key.params_type]\n        params = case[data_key.params]\n        expect_result = case[data_key.expect_result]\n        headers = case[data_key.headers]\n        cookies =case[data_key.cookies]\n        code = case[data_key.code]\n        db_verify = case[data_key.db_verify]\n    \n    \n    \n        # 1、验证前置条件\n        if pre_exec:\n            pass\n        # 2、找到执行用例\n            # 前置测试用例\n            pre_case = data_init.get_case_pre(pre_exec)\n            print(\"前置条件信息为：%s\"%pre_case)\n            pre_res = self.run_pre(pre_case)\n            headers,cookies = self.get_correlation(headers,cookies,pre_res)\n    \n        header = Base.json_parse(headers)\n        cookie = Base.json_parse(cookies)\n        res = self.run_api(url, method, params, header,cookie)\n        print(\"测试用例执行：%s\" % res)\n    \n        #allure\n        #sheet名称  feature 一级标签\n        allure.dynamic.feature(sheet_name)\n        #模块   story 二级标签\n        allure.dynamic.story(case_model)\n        #用例ID+接口名称  title\n        allure.dynamic.title(case_id+case_name)\n        #请求URL  请求类型 期望结果 实际结果描述\n        desc = \"<font color='red'>当前执行时间: </font> {}<Br/>\" \\\n                \"<font color='red'>请求URL: </font> {}<Br/>\" \\\n               \"<font color='red'>请求类型: </font>{}<Br/>\" \\\n                \"<font color='red'>期望状态码: </font>{}<Br/>\" \\\n                \"<font color='red'>实际状态码: </font>{}<Br/>\" \\\n               \"<font color='red'>期望结果: </font>{}<Br/>\" \\\n               \"<font color='red'>实际结果: </font>{}\".format(str(datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")),\n                                                          url,method,code,pprint.pformat(res[\"code\"]),\n                                                          pprint.pformat(eval(expect_result)),\n                                                          pprint.pformat(res[\"body\"]))\n        allure.dynamic.description(desc)\n    \n    \n        #断言验证\n        #状态码，返回结果内容，数据库相关的结果的验证\n        #状态码\n        #assert_util = AssertUitl()\n        AssertUitl().assert_code(int(res[\"code\"]),int(code))\n    \n        #返回结果内容\n>       AssertUitl().assert_int_body_dict(expect_result,res[\"body\"])\n\ntestcase\\test_excel_case.py:163: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.AssertUitl.AssertUitl object at 0x042038B0>\nexpected_body = \"{'id': 1, 'username': 'python', 'mobile': '17701397029', 'email': '952673638@qq.com'}\"\nbody = {'email': '952673638@qq.com', 'email_active': True, 'id': 1, 'mobile': '17701397029', ...}\n\n    def assert_int_body_dict(self,expected_body,body):\n        \"\"\"\n        #只接收字典类型数据\n        # 验证返回结果 body是否包含expected_body\n        # :param body:            接口请求所返回的body\n        # :param expected_body:  表格取的需要对比的body\n        # :return:\n        \"\"\"\n        try:\n            count=0\n            for body_key in body.keys():\n>               for expected_body_key in expected_body.keys():\nE               AttributeError: 'str' object has no attribute 'keys'\n\nutils\\AssertUitl.py:66: AttributeError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "f3e93001a80a89fc",
      "name" : "log",
      "source" : "f3e93001a80a89fc.txt",
      "type" : "text/plain",
      "size" : 451
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "美多商城接口测试"
  }, {
    "name" : "story",
    "value" : "个人信息"
  }, {
    "name" : "parentSuite",
    "value" : "testcase"
  }, {
    "name" : "suite",
    "value" : "test_excel_case"
  }, {
    "name" : "subSuite",
    "value" : "TestExcel"
  }, {
    "name" : "host",
    "value" : "SZPC012"
  }, {
    "name" : "thread",
    "value" : "27328-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase.test_excel_case"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case",
    "value" : "{'用例ID': 'Info_2', '模块': '个人信息', '接口名称': '获取个人信息正确', '请求URL': '/user/', '前置条件': 'login_4', '请求类型': 'get', '请求参数类型': '', '请求参数': '', '预期结果': \"{'id': 1, 'username': 'python', 'mobile': '17701397029', 'email': '952673638@qq.com'}\", '实际结果': '', '备注': '', '是否运行': 'Y', 'headers': '{\"Authorization\": \"JWT ${token}$\"}', 'cookies': '', 'status_code': 200.0, '数据库验证': \"select id,username,mobile,email from tb_users where username='python'\"}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "9ffd0282bc2a6beb.json",
  "parameterValues" : [ "{'用例ID': 'Info_2', '模块': '个人信息', '接口名称': '获取个人信息正确', '请求URL': '/user/', '前置条件': 'login_4', '请求类型': 'get', '请求参数类型': '', '请求参数': '', '预期结果': \"{'id': 1, 'username': 'python', 'mobile': '17701397029', 'email': '952673638@qq.com'}\", '实际结果': '', '备注': '', '是否运行': 'Y', 'headers': '{\"Authorization\": \"JWT ${token}$\"}', 'cookies': '', 'status_code': 200.0, '数据库验证': \"select id,username,mobile,email from tb_users where username='python'\"}" ]
}