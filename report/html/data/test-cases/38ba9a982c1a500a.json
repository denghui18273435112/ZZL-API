{
  "uid" : "38ba9a982c1a500a",
  "name" : "order_1保存订单",
  "fullName" : "testcase.test_excel_case.TestExcel#test_run",
  "historyId" : "b81b22056ae3ec83deb0d9bdd9b4d149",
  "time" : {
    "start" : 1598239173919,
    "stop" : 1598239174930,
    "duration" : 1011
  },
  "status" : "broken",
  "statusMessage" : "  File \"<string>\", line 0\n    \n    ^\nSyntaxError: unexpected EOF while parsing",
  "statusTrace" : "self = <testcase.test_excel_case.TestExcel object at 0x04CDBC70>\ncase = {'cookies': '', 'headers': '{\"Authorization\": \"JWT ${token}$\"}', 'status_code': 201.0, '前置条件': 'login_4', ...}\n\n    @pytest.mark.parametrize(\"case\",run_list)\n    # 2、修改方法参数\n    def test_run(self,case):\n    \n    \n    \n        # 3、重构函数内容\n        #data_key = ExcelConfig.DataConfig\n        # run_list第1个用例，用例，key获取values\n        #获取表格上字段的信息\n        url = ConfigYaml().get_conf_url()+case[data_key.url]\n        case_id = case[data_key.case_id]\n        case_model = case[data_key.case_model]\n        case_name = case[data_key.case_name]\n        pre_exec = case[data_key.pre_exec]\n        method = case[data_key.method]\n        params_type = case[data_key.params_type]\n        params = case[data_key.params]\n        expect_result = case[data_key.expect_result]\n        headers = case[data_key.headers]\n        cookies =case[data_key.cookies]\n        code = case[data_key.code]\n        db_verify = case[data_key.db_verify]\n    \n    \n    \n        # 1、验证前置条件\n        if pre_exec:\n            pass\n        # 2、找到执行用例\n            # 前置测试用例\n            pre_case = data_init.get_case_pre(pre_exec)\n            print(\"前置条件信息为：%s\"%pre_case)\n            pre_res = self.run_pre(pre_case)\n            headers,cookies = self.get_correlation(headers,cookies,pre_res)\n    \n        header = Base.json_parse(headers)\n        cookie = Base.json_parse(cookies)\n        res = self.run_api(url, method, params, header,cookie)\n        print(\"测试用例执行：%s\" % res)\n    \n        #allure\n        #sheet名称  feature 一级标签\n        allure.dynamic.feature(sheet_name)\n        #模块   story 二级标签\n        allure.dynamic.story(case_model)\n        #用例ID+接口名称  title\n        allure.dynamic.title(case_id+case_name)\n        #请求URL  请求类型 期望结果 实际结果描述\n        desc = \"<font color='red'>当前执行时间: </font> {}<Br/>\" \\\n                \"<font color='red'>请求URL: </font> {}<Br/>\" \\\n               \"<font color='red'>请求类型: </font>{}<Br/>\" \\\n                \"<font color='red'>期望状态码: </font>{}<Br/>\" \\\n                \"<font color='red'>实际状态码: </font>{}<Br/>\" \\\n               \"<font color='red'>期望结果: </font>{}<Br/>\" \\\n               \"<font color='red'>实际结果: </font>{}\".format(str(datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")),\n                                                          url,method,code,pprint.pformat(res[\"code\"]),\n>                                                         pprint.pformat(eval(expect_result)),\n                                                          pprint.pformat(res[\"body\"]))\nE         File \"<string>\", line 0\nE           \nE           ^\nE       SyntaxError: unexpected EOF while parsing\n\ntestcase\\test_excel_case.py:151: SyntaxError",
  "flaky" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "  File \"<string>\", line 0\n    \n    ^\nSyntaxError: unexpected EOF while parsing",
    "statusTrace" : "self = <testcase.test_excel_case.TestExcel object at 0x04CDBC70>\ncase = {'cookies': '', 'headers': '{\"Authorization\": \"JWT ${token}$\"}', 'status_code': 201.0, '前置条件': 'login_4', ...}\n\n    @pytest.mark.parametrize(\"case\",run_list)\n    # 2、修改方法参数\n    def test_run(self,case):\n    \n    \n    \n        # 3、重构函数内容\n        #data_key = ExcelConfig.DataConfig\n        # run_list第1个用例，用例，key获取values\n        #获取表格上字段的信息\n        url = ConfigYaml().get_conf_url()+case[data_key.url]\n        case_id = case[data_key.case_id]\n        case_model = case[data_key.case_model]\n        case_name = case[data_key.case_name]\n        pre_exec = case[data_key.pre_exec]\n        method = case[data_key.method]\n        params_type = case[data_key.params_type]\n        params = case[data_key.params]\n        expect_result = case[data_key.expect_result]\n        headers = case[data_key.headers]\n        cookies =case[data_key.cookies]\n        code = case[data_key.code]\n        db_verify = case[data_key.db_verify]\n    \n    \n    \n        # 1、验证前置条件\n        if pre_exec:\n            pass\n        # 2、找到执行用例\n            # 前置测试用例\n            pre_case = data_init.get_case_pre(pre_exec)\n            print(\"前置条件信息为：%s\"%pre_case)\n            pre_res = self.run_pre(pre_case)\n            headers,cookies = self.get_correlation(headers,cookies,pre_res)\n    \n        header = Base.json_parse(headers)\n        cookie = Base.json_parse(cookies)\n        res = self.run_api(url, method, params, header,cookie)\n        print(\"测试用例执行：%s\" % res)\n    \n        #allure\n        #sheet名称  feature 一级标签\n        allure.dynamic.feature(sheet_name)\n        #模块   story 二级标签\n        allure.dynamic.story(case_model)\n        #用例ID+接口名称  title\n        allure.dynamic.title(case_id+case_name)\n        #请求URL  请求类型 期望结果 实际结果描述\n        desc = \"<font color='red'>当前执行时间: </font> {}<Br/>\" \\\n                \"<font color='red'>请求URL: </font> {}<Br/>\" \\\n               \"<font color='red'>请求类型: </font>{}<Br/>\" \\\n                \"<font color='red'>期望状态码: </font>{}<Br/>\" \\\n                \"<font color='red'>实际状态码: </font>{}<Br/>\" \\\n               \"<font color='red'>期望结果: </font>{}<Br/>\" \\\n               \"<font color='red'>实际结果: </font>{}\".format(str(datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")),\n                                                          url,method,code,pprint.pformat(res[\"code\"]),\n>                                                         pprint.pformat(eval(expect_result)),\n                                                          pprint.pformat(res[\"body\"]))\nE         File \"<string>\", line 0\nE           \nE           ^\nE       SyntaxError: unexpected EOF while parsing\n\ntestcase\\test_excel_case.py:151: SyntaxError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "2ed1d1fb4a2c0eb5",
      "name" : "log",
      "source" : "2ed1d1fb4a2c0eb5.txt",
      "type" : "text/plain",
      "size" : 121
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "美多商城接口测试"
  }, {
    "name" : "story",
    "value" : "订单"
  }, {
    "name" : "parentSuite",
    "value" : "testcase"
  }, {
    "name" : "suite",
    "value" : "test_excel_case"
  }, {
    "name" : "subSuite",
    "value" : "TestExcel"
  }, {
    "name" : "host",
    "value" : "SZPC012"
  }, {
    "name" : "thread",
    "value" : "27152-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase.test_excel_case"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case",
    "value" : "{'用例ID': 'order_1', '模块': '订单', '接口名称': '保存订单', '请求URL': '/orders/', '前置条件': 'login_4', '请求类型': 'post', '请求参数类型': 'json', '请求参数': '{ \"address\":\"1\",\"pay_method\":\"1\" }', '预期结果': '', '实际结果': '', '备注': '', '是否运行': 'Y', 'headers': '{\"Authorization\": \"JWT ${token}$\"}', 'cookies': '', 'status_code': 201.0, '数据库验证': ''}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "38ba9a982c1a500a.json",
  "parameterValues" : [ "{'用例ID': 'order_1', '模块': '订单', '接口名称': '保存订单', '请求URL': '/orders/', '前置条件': 'login_4', '请求类型': 'post', '请求参数类型': 'json', '请求参数': '{ \"address\":\"1\",\"pay_method\":\"1\" }', '预期结果': '', '实际结果': '', '备注': '', '是否运行': 'Y', 'headers': '{\"Authorization\": \"JWT ${token}$\"}', 'cookies': '', 'status_code': 201.0, '数据库验证': ''}" ]
}