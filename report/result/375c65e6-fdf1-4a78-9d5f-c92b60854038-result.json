{"name": "login_3登录名或密码为空", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <testcase.test_excel_case.TestExcel object at 0x047D72B0>\ncase = {'cookies': '', 'headers': '', 'status_code': 401.0, '前置条件': '', ...}\n\n    @pytest.mark.parametrize(\"case\",run_list)\n    # 2、修改方法参数\n    def test_run(self,case):\n    \n    \n    \n        # 3、重构函数内容\n        #data_key = ExcelConfig.DataConfig\n        # run_list第1个用例，用例，key获取values\n        #获取表格上字段的信息\n        url = ConfigYaml().get_conf_url()+case[data_key.url]\n        case_id = case[data_key.case_id]\n        case_model = case[data_key.case_model]\n        case_name = case[data_key.case_name]\n        pre_exec = case[data_key.pre_exec]\n        method = case[data_key.method]\n        params_type = case[data_key.params_type]\n        params = case[data_key.params]\n        expect_result = case[data_key.expect_result]\n        headers = case[data_key.headers]\n        cookies =case[data_key.cookies]\n        code = case[data_key.code]\n        db_verify = case[data_key.db_verify]\n    \n    \n    \n        # 1、验证前置条件\n        if pre_exec:\n            pass\n        # 2、找到执行用例\n            # 前置测试用例\n            pre_case = data_init.get_case_pre(pre_exec)\n            print(\"前置条件信息为：%s\"%pre_case)\n            pre_res = self.run_pre(pre_case)\n            headers,cookies = self.get_correlation(headers,cookies,pre_res)\n    \n        header = Base.json_parse(headers)\n        cookie = Base.json_parse(cookies)\n        res = self.run_api(url, method, params, header,cookie)\n        print(\"测试用例执行：%s\" % res)\n    \n        #allure\n        #sheet名称  feature 一级标签\n        allure.dynamic.feature(sheet_name)\n        #模块   story 二级标签\n        allure.dynamic.story(case_model)\n        #用例ID+接口名称  title\n        allure.dynamic.title(case_id+case_name)\n        #请求URL  请求类型 期望结果 实际结果描述\n        desc = \"<font color='red'>当前执行时间: </font> {}<Br/>\" \\\n                \"<font color='red'>请求URL: </font> {}<Br/>\" \\\n               \"<font color='red'>请求类型: </font>{}<Br/>\" \\\n                \"<font color='red'>期望状态码: </font>{}<Br/>\" \\\n                \"<font color='red'>实际状态码: </font>{}<Br/>\" \\\n               \"<font color='red'>期望结果: </font>{}<Br/>\" \\\n               \"<font color='red'>实际结果: </font>{}\".format(str(datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")),\n                                                          url,method,code,pprint.pformat(res[\"code\"]),\n                                                          pprint.pformat(eval(expect_result)),\n                                                          pprint.pformat(res[\"body\"]))\n        allure.dynamic.description(desc)\n    \n    \n        #断言验证\n        #状态码，返回结果内容，数据库相关的结果的验证\n        #状态码\n        #assert_util = AssertUitl()\n>       AssertUitl().assert_code(int(res[\"code\"]),int(code))\n\ntestcase\\test_excel_case.py:160: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.AssertUitl.AssertUitl object at 0x047CFDB0>, code = 400\nexpected_code = 401\n\n    def assert_code(self,code,expected_code):\n        \"\"\"\n        #预期和实际是否一致;#抛出异常；如果相等返回ture;如果不相等抛出异常\n         有关于python里raise显示引发异常的方法:\n        当程序出错时,python会自动触发异常,也可以通过raise显示引发异常\n        一旦执行了raise语句,raise之后的语句不在执行\n        如果加入了try,except,那么except里的语句会被执行\n        :param code: 接口请求所返回的状态码\n        :param expected_code: 需要对比的状态码\n        :return:\n        \"\"\"\n        try:\n>           assert  int(code) == int(expected_code)\nE           AssertionError\n\nutils\\AssertUitl.py:21: AssertionError"}, "description": "<font color='red'>当前执行时间: </font> 2020-08-24 11:28:15<Br/><font color='red'>请求URL: </font> http://211.103.136.242:8064/authorizations/<Br/><font color='red'>请求类型: </font>POST<Br/><font color='red'>期望状态码: </font>401.0<Br/><font color='red'>实际状态码: </font>400<Br/><font color='red'>期望结果: </font>{'password': ['该字段不能为空。'], 'username': ['该字段不能为空。']}<Br/><font color='red'>实际结果: </font>{'password': ['该字段不能为空。'], 'username': ['该字段不能为空。']}", "attachments": [{"name": "log", "source": "ab2e9a21-86df-43d7-87a0-3ab54152c9e1-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'用例ID': 'login_3', '模块': '登录', '接口名称': '登录名或密码为空', '请求URL': '/authorizations/', '前置条件': '', '请求类型': 'POST', '请求参数类型': 'json', '请求参数': '{\"username\":\"\",\"password\":\"\"}', '预期结果': \"{'password': ['该字段不能为空。'], 'username': ['该字段不能为空。']}\", '实际结果': '', '备注': '', '是否运行': 'Y', 'headers': '', 'cookies': '', 'status_code': 401.0, '数据库验证': ''}"}], "start": 1598239695384, "stop": 1598239695517, "uuid": "754a313f-d634-492b-a795-f551f79ce60d", "historyId": "755238e9ea79110f7e491006bdfe6e93", "testCaseId": "dd2521432c4340b625f0f9387327dd8f", "fullName": "testcase.test_excel_case.TestExcel#test_run", "labels": [{"name": "feature", "value": "美多商城接口测试"}, {"name": "story", "value": "登录"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_excel_case"}, {"name": "subSuite", "value": "TestExcel"}, {"name": "host", "value": "SZPC012"}, {"name": "thread", "value": "24124-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_excel_case"}]}